/*
 * $size: size in pixel you want to have at $breakpoint
 * $min-size: min size of the responsive font: doesn't go smaller
 * $breakpoint: breakpoint to start using responsive fontSize
 */
/*
 * Flexbox Grid generator
 *
 */
/*
 * Styles a <textarea> with horizontal line rules
 * $line-height: px value of textarea's line-height
 * $rule-height: px value of desired rule height
 * $rule-color: desired color of horizontal rules
 */
@font-face {
  font-family: "Roboto-Regular";
  src: url("/assets/fonts/Roboto-Regular.eot");
  src: url("/assets/fonts/Roboto-Regular.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Roboto-Regular.woff") format("woff"), url("/assets/fonts/Roboto-Regular.ttf") format("truetype"), url("/assets/fonts//Roboto-Regular.svg#0c731854a8b5e977b75f48317eb687c8") format("svg");
  font-weight: normal;
  font-style: normal; }

.vertical-align-wrapper {
  display: table-cell;
  vertical-align: middle;
  text-align: center; }

/*
  For more information about flex, check out Chris Coyier's article: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
  Based on -> https://github.com/kristoferjoseph/flexboxgrid/blob/master/css/flexboxgrid.css
*/
/* ---- Flex alignment classes ---- */
.row {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
  width: 100%; }
  .row.reverse {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
    -webkit-flex-direction: row-reverse;
        -ms-flex-direction: row-reverse;
            flex-direction: row-reverse; }
  .row.full {
    margin: 0;
    padding: 0; }
  .row.show-overlay [class*='col-'] {
    position: relative; }
    .row.show-overlay [class*='col-']::before {
      content: "";
      z-index: 100;
      display: block;
      position: absolute;
      background-color: rgba(215, 215, 215, 0.5);
      width: calc(100% - 15px);
      height: 100%; }

.col {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column; }
  .col.reverse {
    -webkit-box-orient: vertical;
    -webkit-box-direction: reverse;
    -webkit-flex-direction: column-reverse;
        -ms-flex-direction: column-reverse;
            flex-direction: column-reverse; }

/* Vertical Align */
.vertical-align-wrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center; }

/* Justify-content */
.start {
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
          justify-content: flex-start; }

.center {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center; }

.end {
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
      -ms-flex-pack: end;
          justify-content: flex-end; }

.around {
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around; }

.between {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between; }

/* Align-items */
.top {
  -webkit-box-align: start;
  -webkit-align-items: flex-start;
      -ms-flex-align: start;
          align-items: flex-start; }

.middle {
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center; }

.bottom {
  -webkit-box-align: end;
  -webkit-align-items: flex-end;
      -ms-flex-align: end;
          align-items: flex-end; }

.column {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column; }

/* Order */
.first {
  -webkit-box-ordinal-group: 0;
  -webkit-order: -1;
      -ms-flex-order: -1;
          order: -1; }

.last {
  -webkit-box-ordinal-group: 2;
  -webkit-order: 1;
      -ms-flex-order: 1;
          order: 1; }

.u-scroll-v {
  overflow-y: auto;
  overflow-x: hidden;
  -webkit-overflow-scrolling: touch; }

.u-scroll-h {
  overflow-x: auto;
  overflow-y: hidden;
  -webkit-overflow-scrolling: touch; }

.u-scroll-past {
  height: 100vh !important;
  margin-bottom: 150px; }

* {
  vertical-align: baseline;
  border: 0 none;
  outline: 0;
  padding: 0;
  margin: 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

html, body, div, span, applet, object, iframe, table, caption, tbody, tfoot, thead, tr, th, td,
del, dfn, em, font, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var,
h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code,
dl, dt, dd, ol, ul, li, fieldset, form, label, legend, button {
  font-family: "Roboto-Regular", "Helvetica", "Arial", sans-serif;
  font-weight: normal;
  font-style: normal;
  color: #2b2d30;
  font-size: 1.4rem;
  line-height: 1.86;
  letter-spacing: 0.3px;
  font-weight: normal;
  font-style: normal;
  vertical-align: baseline;
  border: 0 none;
  outline: 0;
  padding: 0;
  margin: 0; }

button {
  border: none;
  border-radius: 0;
  background-color: transparent;
  cursor: pointer; }

[role="button"],
input[type="submit"],
input[type="reset"],
input[type="button"],
button {
  -webkit-box-sizing: content-box;
  box-sizing: content-box; }

/* Reset `button` and button-style `input` default styles */
input[type="submit"],
input[type="reset"],
input[type="button"],
button {
  background: none;
  border: 0;
  color: inherit;
  /* cursor: default; */
  font: inherit;
  line-height: normal;
  overflow: visible;
  padding: 0;
  -webkit-appearance: button;
  /* for input */
  -webkit-user-select: none;
  /* for button */
  -moz-user-select: none;
  -ms-user-select: none; }

input::-moz-focus-inner,
button::-moz-focus-inner {
  border: 0;
  padding: 0; }

li {
  list-style: none; }

a {
  text-decoration: none;
  cursor: pointer;
  line-height: normal; }

/*
 I had to define @mixin to be able to re-use them in _reponsive-utils.
 it's not optimized as it generates 2 different classes, but it does the job
*/
.--skew-up {
  -webkit-transform: skewY(-15deg);
      -ms-transform: skewY(-15deg);
          transform: skewY(-15deg); }

/* Footer */
.--f-footer-regular14 {
  color: #FFF;
  font-family: "Roboto-Regular", "Helvetica", "Arial", sans-serif;
  font-weight: normal;
  font-style: normal;
  font-size: 1.4rem;
  line-height: 1.57143;
  letter-spacing: 0px; }

.--f-footer-regular10 {
  color: #FFF;
  font-family: "Roboto-Regular", "Helvetica", "Arial", sans-serif;
  font-weight: normal;
  font-style: normal;
  font-size: 1rem;
  line-height: 1.6;
  letter-spacing: 0px; }

.--f-footer-regular12 {
  font-family: "Roboto-Regular", "Helvetica", "Arial", sans-serif;
  font-weight: normal;
  font-style: normal;
  font-size: 1.2rem;
  line-height: 1.08333;
  letter-spacing: 0px; }

.--c-white {
  color: #FFF; }

.--c-black {
  color: #000; }

.--c-tangerine {
  color: #ff8c00; }

html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  font-size: 62.5%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }

body {
  overflow: hidden;
  background-color: #FFF; }
  body.scroll-enabled {
    height: auto;
    overflow: auto; }
  body .block-events {
    pointer-events: none !important; }
  body.modal-scroll {
    height: auto;
    overflow: auto; }
    body.modal-scroll #content {
      height: 0px;
      overflow: hidden; }
    body.modal-scroll #content {
      height: 0px;
      overflow: hidden; }
    body.modal-scroll #parade-detail-google-maps-container {
      height: 0px;
      overflow: hidden; }
    body.modal-scroll #modal-container {
      position: relative; }
      body.modal-scroll #modal-container .modal-content-container {
        position: relative; }
        body.modal-scroll #modal-container .modal-content-container .modal {
          position: relative; }

@media (max-width: 768px) {
  html, body {
    height: 100%;
    overflow: auto; } }

#content {
  position: absolute;
  z-index: 5;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0; }
  @media (max-width: 768px) {
    #content {
      top: 56px; } }
  @media (max-width: 480px) {
    #content {
      top: 56px; } }

.reset-mg-inline {
  font-size: 0; }

body {
  text-align: left; }

#main-nav {
  position: absolute;
  z-index: 99; }
  #main-nav header {
    padding-top: 23px;
    padding-left: 24px; }
    @media (max-width: 768px) {
      #main-nav header {
        padding-top: 0px;
        padding-bottom: 56px;
        background-color: #FFF; } }
    @media (max-width: 480px) {
      #main-nav header {
        padding-top: 0px;
        padding-bottom: 56px; } }
    #main-nav header ul button, #main-nav header ul a {
      margin-right: 36px;
      -webkit-transition: opacity 0.5s ease-in-out;
      -o-transition: opacity 0.5s ease-in-out;
      transition: opacity 0.5s ease-in-out; }

.page-wrapper {
  margin-top: 100px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNzcyIsInNvdXJjZXMiOlsiYXBwLnNjc3MiLCJiYXNlL19iYXNlLnNjc3MiLCJiYXNlL21peGlucy9fbWl4aW5zLnNjc3MiLCJiYXNlL3ZhcnMvX2ZvbnRzLnNjc3MiLCJiYXNlL19mb250LWZhY2VzLnNjc3MiLCJiYXNlL3ZhcnMvX3otaW5kZXhlcy5zY3NzIiwiYmFzZS92YXJzL19jb2xvcnMuc2NzcyIsImJhc2UvdmFycy9fdHJhbnNpdGlvbnMuc2NzcyIsImJhc2UvdmFycy9fc2l6ZXMuc2NzcyIsImJhc2UvdmFycy9fbWVkaWEtcXVlcmllcy5zY3NzIiwiYmFzZS91dGlsaXRpZXMvX3UtYWxpZ24uc2NzcyIsImJhc2UvdXRpbGl0aWVzL191LWZsZXguc2NzcyIsImJhc2UvdXRpbGl0aWVzL191LXNjcm9sbC5zY3NzIiwiYmFzZS9fdWktcmVzZXRzLnNjc3MiLCJiYXNlL19mb250LWRlZnMuc2NzcyIsImJhc2UvX3VpLWRlZnMuc2NzcyIsImJhc2UvX3Jlc3BvbnNpdmUtdXRpbHMuc2NzcyIsImNvbXBvbmVudHMvX2hlYWRlci5zY3NzIiwiY29tcG9uZW50cy9fZm9vdGVyLnNjc3MiLCJjb21wb25lbnRzL19wYWdlLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGltcG9ydCAnfm5vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplJztcbkBpbXBvcnQgJ2Jhc2UvYmFzZSc7XG5cbi8vIGNvbXBvbmVudHNcbkBpbXBvcnQgJ2NvbXBvbmVudHMvaGVhZGVyJztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvZm9vdGVyJztcblxuLy8gcGFnZVxuQGltcG9ydCAnY29tcG9uZW50cy9wYWdlJzsiLCIvLyBpbXBvcnQgbWl4aW5zXG5AaW1wb3J0ICdtaXhpbnMvbWl4aW5zJztcblxuLy8gaW1wb3J0IHZhcmlhYmxlc1xuQGltcG9ydCAndmFycy9mb250cyc7XG5AaW1wb3J0ICd2YXJzL3otaW5kZXhlcyc7XG5AaW1wb3J0ICd2YXJzL2NvbG9ycyc7XG5AaW1wb3J0ICd2YXJzL3RyYW5zaXRpb25zJztcbkBpbXBvcnQgJ3ZhcnMvc2l6ZXMnO1xuQGltcG9ydCAndmFycy9tZWRpYS1xdWVyaWVzJztcblxuLy8gaW1wb3J0IHV0bGl0aWVzXG5AaW1wb3J0ICd1dGlsaXRpZXMvX3UtYWxpZ24nO1xuQGltcG9ydCAndXRpbGl0aWVzL191LWZsZXgnO1xuQGltcG9ydCAndXRpbGl0aWVzL191LXNjcm9sbCc7XG5cblxuQGltcG9ydCAndWktcmVzZXRzJztcblxuLy8gRGVmaW5pdGlvbnNcbkBpbXBvcnQgJ2ZvbnQtZGVmcyc7XG5AaW1wb3J0ICd1aS1kZWZzJztcbkBpbXBvcnQgJ3Jlc3BvbnNpdmUtdXRpbHMnO1xuXG5ib2R5e1xuICAgIC8vIGJhY2tncm91bmQ6IGJsdWU7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbn1cblxuIiwiQG1peGluIHJlc3BvbnNpdmUtZm9udCgkcmVzcG9uc2l2ZSwgJG1pbiwgJG1heDogZmFsc2UsICRmYWxsYmFjazogZmFsc2UpIHtcbiAgJHJlc3BvbnNpdmUtdW5pdGxlc3M6ICRyZXNwb25zaXZlIC8gKCRyZXNwb25zaXZlIC0gJHJlc3BvbnNpdmUgKyAxKTtcbiAgJGRpbWVuc2lvbjogaWYodW5pdCgkcmVzcG9uc2l2ZSkgPT0gJ3ZoJywgJ2hlaWdodCcsICd3aWR0aCcpO1xuICAkbWluLWJyZWFrcG9pbnQ6ICRtaW4gLyAkcmVzcG9uc2l2ZS11bml0bGVzcyAqIDEwMDtcblxuICBAbWVkaWEgKG1heC0jeyRkaW1lbnNpb259OiAjeyRtaW4tYnJlYWtwb2ludH0pIHtcbiAgICBmb250LXNpemU6ICRtaW47XG4gIH1cblxuICBAaWYgJG1heCB7XG4gICAgJG1heC1icmVha3BvaW50OiAkbWF4IC8gJHJlc3BvbnNpdmUtdW5pdGxlc3MgKiAxMDA7XG5cbiAgICBAbWVkaWEgKG1pbi0jeyRkaW1lbnNpb259OiAjeyRtYXgtYnJlYWtwb2ludH0pIHtcbiAgICAgIGZvbnQtc2l6ZTogJG1heDtcbiAgICB9XG4gIH1cblxuICBAaWYgJGZhbGxiYWNrIHtcbiAgICBmb250LXNpemU6ICRmYWxsYmFjaztcbiAgfVxuXG4gIGZvbnQtc2l6ZTogJHJlc3BvbnNpdmU7XG59XG5cbi8qXG4gKiAkc2l6ZTogc2l6ZSBpbiBwaXhlbCB5b3Ugd2FudCB0byBoYXZlIGF0ICRicmVha3BvaW50XG4gKiAkbWluLXNpemU6IG1pbiBzaXplIG9mIHRoZSByZXNwb25zaXZlIGZvbnQ6IGRvZXNuJ3QgZ28gc21hbGxlclxuICogJGJyZWFrcG9pbnQ6IGJyZWFrcG9pbnQgdG8gc3RhcnQgdXNpbmcgcmVzcG9uc2l2ZSBmb250U2l6ZVxuICovXG5AbWl4aW4gZm9udFNpemUoJHNpemUsICRicmVha3BvaW50LCAkbWluLXNpemU6IGZhbHNlKSB7XG5cdC8vIHZhbHVlIGZvciB2d1xuXHQkcmVzcG9uc2l2ZTogJHNpemUgKiAxMDAgLyAkYnJlYWtwb2ludDtcblxuXHQvLyBtaW4gdmFsdWVcbiAgQGlmICRtaW4tc2l6ZSB7XG5cdFx0JG1pbi13aWR0aDogKCRtaW4tc2l6ZSAqIDEwMCkgLyAkcmVzcG9uc2l2ZTtcblxuXHRcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICN7JG1pbi13aWR0aH0gKiAxcHgpIHtcblx0XHQgIGZvbnQtc2l6ZTogJG1pbi1zaXplICogMXB4O1xuXHRcdH1cblx0fVxuXG5cdGZvbnQtc2l6ZTogJHJlc3BvbnNpdmUgKiAxdnc7XG59XG5cbi8qXG4gKiBGbGV4Ym94IEdyaWQgZ2VuZXJhdG9yXG4gKlxuICovXG5AbWl4aW4gZ2VuZXJhdGVHcmlkKCRzaXplLCAkbWluLWNvbHVtcywgJG1heC1jb2x1bXMsICRndXR0ZXIsICRncmlkLWNvbHVtbiwgJGdyaWQtd2lkdGgpIHtcblxuICAkY29sdW1uLXBlcmNlbnQ6ICRncmlkLWNvbHVtbiAvICRncmlkLXdpZHRoICogMTAwO1xuICAkZ3V0dGVyLXBlcmNlbnQ6ICRndXR0ZXIgLyAkZ3JpZC13aWR0aCAqIDEwMDtcblxuICBAZm9yICRpIGZyb20gJG1pbi1jb2x1bXMgdGhyb3VnaCAkbWF4LWNvbHVtcyB7XG5cbiAgICAvLyBmb3JtdWxhIDogSSB4IGNvbHVtbiBwZXJjZW50ICsgaS0xICogZ3V0dGVyIHBlcmNlbnRcbiAgICAkY3VycmVudFBlcmNlbnQ6MDtcbiAgICAkY3VycmVudFBlcmNlbnRXaXRoR3V0dGVyOjA7XG4gICAgQGlmICRpID09ICRtYXgtY29sdW1zIHtcbiAgICAgICRjdXJyZW50UGVyY2VudDogMTAwO1xuICAgICAgJGN1cnJlbnRQZXJjZW50V2l0aEd1dHRlcjogMTAwO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJGN1cnJlbnRQZXJjZW50OiAkaSAqICRjb2x1bW4tcGVyY2VudCArICgkaSAtIDEpICogJGd1dHRlci1wZXJjZW50O1xuICAgICAgJGN1cnJlbnRQZXJjZW50V2l0aEd1dHRlcjogJGkgKiAkY29sdW1uLXBlcmNlbnQgKyAkaSAqICRndXR0ZXItcGVyY2VudDtcbiAgICB9XG5cbiAgICAkdndWYWx1ZTogJGN1cnJlbnRQZXJjZW50ICogMXZ3O1xuICAgICR2d1ZhbHVlV2l0aEd1dHRlcjogJGN1cnJlbnRQZXJjZW50V2l0aEd1dHRlciAqIDF2dztcblxuICAgICRwZXJjZW50VmFsdWU6ICRjdXJyZW50UGVyY2VudCAqIDElO1xuICAgICRwZXJjZW50VmFsdWVXaXRoR3V0dGVyOiAkY3VycmVudFBlcmNlbnRXaXRoR3V0dGVyICogMSU7XG5cbiAgICAkY3VycmVudEd1dHRlclBlcmNlbnQ6ICRpICogJGd1dHRlci1wZXJjZW50O1xuICAgICR2d1ZhbHVlR3V0dGVyOiAkY3VycmVudEd1dHRlclBlcmNlbnQgKiAxdnc7XG5cbiAgICAvLyAlXG4gICAgLmNvbC0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBmbGV4LWJhc2lzOiAkcGVyY2VudFZhbHVlO1xuICAgICAgd2lkdGg6ICRwZXJjZW50VmFsdWU7XG4gICAgICBtYXgtd2lkdGg6ICRwZXJjZW50VmFsdWU7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAkZ3V0dGVyICsgcHg7XG5cbiAgICAgICYubm8tZ3V0dGVye1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gJSArIGd1dHRlciBpbmNsdWRlZCBpbnNpZGUgdGhlIGNvbHVtblxuICAgIC5jb2wtZ3V0dGVyaW5jbHVkZWQtI3skc2l6ZX0tI3skaX0ge1xuICAgICAgZmxleC1iYXNpczogJHBlcmNlbnRWYWx1ZVdpdGhHdXR0ZXI7XG4gICAgICB3aWR0aDogJHBlcmNlbnRWYWx1ZVdpdGhHdXR0ZXI7XG4gICAgICBtYXgtd2lkdGg6ICRwZXJjZW50VmFsdWVXaXRoR3V0dGVyO1xuICAgICAgcGFkZGluZy1yaWdodDogMDtcbiAgICB9XG5cbiAgICAuY29sLSN7JHNpemV9LW9mZnNldC0jeyRpfSB7XG4gICAgICBtYXJnaW46ICRwZXJjZW50VmFsdWU7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICB9XG5cbiAgICAuZ3V0dGVyLSN7JHNpemV9LSN7JGl9IHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAkZ3V0dGVyLXBlcmNlbnQgKiAxJTtcbiAgICB9XG5cbiAgICAub2ZmLSN7JHNpemV9LSN7JGl9IHtcbiAgICAgIEBpZiAkaSA+IDAge1xuICAgICAgICBtYXJnaW4tbGVmdDogJHBlcmNlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLm9mZi1yLSN7JHNpemV9LSN7JGl9IHtcbiAgICAgIEBpZiAkaSA+IDAge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6ICRwZXJjZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm9mZi1ndXR0ZXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgQGlmICRpID4gMCB7XG4gICAgICAgIEBpZiAkaSA9PSAkbWF4LWNvbHVtcyB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwMCU7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxJSAqICgkaSAqICRjb2x1bW4tcGVyY2VudCArICRpICogJGd1dHRlci1wZXJjZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIDEgY29sdW1uICsgMiBndXR0ZXIgb2Zmc2V0XG4gICAgLm9mZi1kb3VibGVndXR0ZXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgQGlmICRpID4gMCB7XG4gICAgICAgIEBpZiAkaSA9PSAkbWF4LWNvbHVtcyB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwMCU7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxJSAqICgkaSAqICRjb2x1bW4tcGVyY2VudCArICgkaSArIDEpICogJGd1dHRlci1wZXJjZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC5vZmYtZ3V0dGVyLXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgQGlmICRpID4gMCB7XG4gICAgICAgIEBpZiAkaSA9PSAkbWF4LWNvbHVtcyB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMDAlO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDElICogKCRpICogJGNvbHVtbi1wZXJjZW50ICsgJGkgKiAkZ3V0dGVyLXBlcmNlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gMSBjb2x1bW4gKyAyIGd1dHRlciBvZmZzZXRcbiAgICAub2ZmLWRvdWJsZWd1dHRlci1yLSN7JHNpemV9LSN7JGl9IHtcbiAgICAgIEBpZiAkaSA+IDAge1xuICAgICAgICBAaWYgJGkgPT0gJG1heC1jb2x1bXMge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMDAlO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMSUgKiAoJGkgKiAkY29sdW1uLXBlcmNlbnQgKyAoJGkgKyAxKSAqICRndXR0ZXItcGVyY2VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIHJvb3RcbiAgICAuY29sLXJvb3QtI3skc2l6ZX0tI3skaX0ge1xuICAgICAgZmxleC1iYXNpczogJHZ3VmFsdWU7XG4gICAgICB3aWR0aDogJHZ3VmFsdWU7XG4gICAgICBtYXgtd2lkdGg6ICR2d1ZhbHVlO1xuICAgICAgcGFkZGluZy1yaWdodDogJGd1dHRlciArIHB4O1xuICAgIH1cblxuICAgIC5jb2wtcm9vdC13aXRoLWd1dHRlci0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBmbGV4LWJhc2lzOiAkdndWYWx1ZVdpdGhHdXR0ZXI7XG4gICAgICB3aWR0aDogJHZ3VmFsdWVXaXRoR3V0dGVyO1xuICAgICAgbWF4LXdpZHRoOiAkdndWYWx1ZVdpdGhHdXR0ZXI7XG4gICAgfVxuXG4gICAgLy8gcm9vdCArIGd1dHRlciBpbmNsdWRlZCBpbnNpZGUgdGhlIGNvbHVtblxuICAgIC5jb2wtZ3V0dGVyaW5jbHVkZWQtcm9vdC0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBmbGV4LWJhc2lzOiAkdndWYWx1ZUd1dHRlcjtcbiAgICAgIHdpZHRoOiAkdndWYWx1ZUd1dHRlcjtcbiAgICAgIG1heC13aWR0aDogJHZ3VmFsdWVHdXR0ZXI7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgIH1cblxuICAgIC5jb2wtcm9vdC0jeyRzaXplfS1vZmZzZXQtI3skaX0ge1xuICAgICAgbWFyZ2luOiAkdndWYWx1ZTtcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICBtYXJnaW4tdG9wOiAwO1xuICAgIH1cblxuICAgIC5vZmYtcm9vdC0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBAaWYgJGkgPiAwIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAkdndWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLm9mZi1yb290LXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgQGlmICRpID4gMCB7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICR2d1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICAub2ZmLXJvb3QtZ3V0dGVyLSN7JHNpemV9LSN7JGl9IHtcbiAgICAgIEBpZiAkaSA+IDAge1xuICAgICAgICBAaWYgJGkgPT0gJG1heC1jb2x1bXMge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMTAwdnc7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMXZ3ICogKCRpICogJGNvbHVtbi1wZXJjZW50ICsgJGkgKiAkZ3V0dGVyLXBlcmNlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC5vZmYtcm9vdC1ndXR0ZXItci0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBAaWYgJGkgPiAwIHtcbiAgICAgICAgQGlmICRpID09ICRtYXgtY29sdW1zIHtcbiAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMDB2dztcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgcGFkZGluZy1yaWdodDogMXZ3ICogKCRpICogJGNvbHVtbi1wZXJjZW50ICsgJGkgKiAkZ3V0dGVyLXBlcmNlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWJzb2x1dGVcbiAgICAub2ZmLWFicy0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBsZWZ0OiAkdndWYWx1ZTtcbiAgICB9XG5cbiAgICAub2ZmLWFicy1ndXR0ZXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgbGVmdDogJHZ3VmFsdWVHdXR0ZXI7XG4gICAgfVxuXG4gICAgLm9mZi1hYnMtci0jeyRzaXplfS0jeyRpfSB7XG4gICAgICByaWdodDogJHZ3VmFsdWU7XG4gICAgfVxuXG4gICAgLm9mZi1hYnMtci1ndXR0ZXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgcmlnaHQ6ICR2d1ZhbHVlR3V0dGVyO1xuICAgIH1cblxuICAgIC5tZy1ndXR0ZXItI3skc2l6ZX0tI3skaX0ge1xuICAgICAgbWFyZ2luLWxlZnQ6ICgkaSAqICRndXR0ZXIpICsgcHg7XG4gICAgfVxuICAgIC5tZy1ndXR0ZXItci0jeyRzaXplfS0jeyRpfSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6ICgkaSAqICRndXR0ZXIpICsgcHg7XG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCBvZmZzZXRzXG5cbiAgICAub2ZmLSN7JHNpemV9IHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgfVxuICAgIC5vZmYtci0jeyRzaXplfXtcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB9XG4gICAgLm9mZi1ndXR0ZXItI3skc2l6ZX17XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICB9XG4gICAgLm9mZi1ndXR0ZXItci0jeyRzaXplfXtcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB9XG4gICAgLm9mZi1yb290LSN7JHNpemV9e1xuICAgICAgcGFkZGluZy1sZWZ0OjA7XG4gICAgfVxuICAgIC5vZmYtcm9vdC1yLSN7JHNpemV9IHtcbiAgICAgICAgcGFkZGluZy1yaWdodDowO1xuICAgIH1cbiAgICAub2ZmLXJvb3QtZ3V0dGVyLSN7JHNpemV9IHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIH1cbiAgICAub2ZmLXJvb3QtZ3V0dGVyLXItI3skc2l6ZX0ge1xuICAgICAgcGFkZGluZy1yaWdodDogMDtcbiAgICB9XG5cblxuXG4gIH1cblxuICAvLyAvLyBUbyBoYXZlIGEgZmlyc3QgcGFkZGluZyB0aGF0IGRvZXNuJ3QgaGF2ZSB0aGUgZ3V0dGVyXG4gIC8vIC8vICVcbiAgLy8gLm9mZi0jeyRzaXplfS1maXJzdCB7XG4gIC8vICAgICBtYXJnaW4tbGVmdDogY2FsYygjeygxMDAlIC8gJG1heC1jb2x1bXMpfSk7XG4gIC8vIH1cbiAgLy8gLm9mZi0jeyRzaXplfS1ndC1maXJzdCB7XG4gIC8vICAgICBtYXJnaW4tbGVmdDogY2FsYyggI3soMTAwJSAvICRtYXgtY29sdW1zKX0gLSAjeyRndXR0ZXIgKyBweH0gKyAjeygkZ3V0dGVyIC8gJG1heC1jb2x1bXMpICsgcHh9ICk7XG4gIC8vIH1cbiAgLy8gLm9mZi1yLSN7JHNpemV9LWZpcnN0IHtcbiAgLy8gICAgIG1hcmdpbi1yaWdodDogY2FsYygjeygxMDAlIC8gJG1heC1jb2x1bXMpfTtcbiAgLy8gfVxuICAvLyAub2ZmLXItI3skc2l6ZX0tZ3QtZmlyc3Qge1xuICAvLyAgICAgbWFyZ2luLXJpZ2h0OiBjYWxjKCN7KDEwMCUgLyAkbWF4LWNvbHVtcyl9IC0gI3skZ3V0dGVyICsgcHh9ICsgI3soJGd1dHRlciAvICRtYXgtY29sdW1zKSArIHB4fSApO1xuICAvLyB9XG5cblxuICAvLyAvLyByb290XG4gIC8vIC5vZmYtcm9vdC0jeyRzaXplfS1maXJzdCB7XG4gIC8vICAgICBwYWRkaW5nLWxlZnQ6IGNhbGMoI3soMTAwdncgLyAkbWF4LWNvbHVtcyl9KTtcbiAgLy8gfVxuICAvLyAub2ZmLXJvb3QtI3skc2l6ZX0tZ3QtZmlyc3Qge1xuICAvLyAgICAgcGFkZGluZy1sZWZ0OiBjYWxjKCAjeygxMDB2dyAvICRtYXgtY29sdW1zKX0gLSAjeyRndXR0ZXIgKyBweH0gKyAjeygkZ3V0dGVyIC8gJG1heC1jb2x1bXMpICsgcHh9ICk7XG4gIC8vIH1cbiAgLy8gLm9mZi1yb290LXItI3skc2l6ZX0tZmlyc3Qge1xuICAvLyAgICAgcGFkZGluZy1yaWdodDogY2FsYygjeygxMDB2dyAvICRtYXgtY29sdW1zKX07XG4gIC8vIH1cbiAgLy8gLm9mZi1yb290LXItI3skc2l6ZX0tZ3QtZmlyc3Qge1xuICAvLyAgICAgcGFkZGluZy1yaWdodDogY2FsYygjeygxMDB2dyAvICRtYXgtY29sdW1zKX0gLSAjeyRndXR0ZXIgKyBweH0gKyAjeygkZ3V0dGVyIC8gJG1heC1jb2x1bXMpICsgcHh9ICk7XG4gIC8vIH1cblxuXG4gIC5jb2wtI3skc2l6ZX0tYXV0byB7XG4gICAgZmxleDogMSAxIGF1dG87XG4gICAgbWF4LXdpZHRoOiBpbmhlcml0O1xuICB9XG4gIC8vIFJlbW92ZSB0aGUgcGFkZGluZyAoZ3V0dGVyKSBmb3IgdGhlIGxhc3QgaXRlbVxuICBbY2xhc3MqPSdjb2wtJ106bGFzdC1vZi10eXBlIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICB9XG59XG5cbi8qXG4gKiBTdHlsZXMgYSA8dGV4dGFyZWE+IHdpdGggaG9yaXpvbnRhbCBsaW5lIHJ1bGVzXG4gKiAkbGluZS1oZWlnaHQ6IHB4IHZhbHVlIG9mIHRleHRhcmVhJ3MgbGluZS1oZWlnaHRcbiAqICRydWxlLWhlaWdodDogcHggdmFsdWUgb2YgZGVzaXJlZCBydWxlIGhlaWdodFxuICogJHJ1bGUtY29sb3I6IGRlc2lyZWQgY29sb3Igb2YgaG9yaXpvbnRhbCBydWxlc1xuICovXG5AbWl4aW4gbXVsdGlsaW5lLWlucHV0KCRsaW5lLWhlaWdodCwgJHJ1bGUtaGVpZ2h0LCAkcnVsZS1jb2xvcikge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChmcm9tIHRvcCwgdHJhbnNwYXJlbnQsIHRyYW5zcGFyZW50ICRsaW5lLWhlaWdodCwgJHJ1bGUtY29sb3IgMCk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogLW1zLWxpbmVhci1ncmFkaWVudCh0b3AsIHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCAkbGluZS1oZWlnaHQsICRydWxlLWNvbG9yIDApO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC1vLWxpbmVhci1ncmFkaWVudCh0b3AsIHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCAkbGluZS1oZWlnaHQsICRydWxlLWNvbG9yIDApO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC1tb3otbGluZWFyLWdyYWRpZW50KHRvcCwgdHJhbnNwYXJlbnQsIHRyYW5zcGFyZW50ICRsaW5lLWhlaWdodCwgJHJ1bGUtY29sb3IgMCk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCB0cmFuc3BhcmVudCwgdHJhbnNwYXJlbnQgJGxpbmUtaGVpZ2h0LCAkcnVsZS1jb2xvciAwKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgJGxpbmUtaGVpZ2h0ICsgJHJ1bGUtaGVpZ2h0O1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQ7XG5cbiAgICByZXNpemU6IG5vbmU7XG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xufVxuXG5AbWl4aW4gY1RvbWF0b1JnYmEoJGF0dHJpYnV0ZSwgJGFscGhhKSB7XG4gICN7JGF0dHJpYnV0ZX06IHJnYmEoMjMzLCA2NywgNTMsICRhbHBoYSk7XG59XG5cbkBtaXhpbiBjR29sZGVuUm9kUmdiYSgkYXR0cmlidXRlLCAkYWxwaGEpIHtcbiAgI3skYXR0cmlidXRlfTogcmdiYSgyNDksIDE4NiwgNSwgJGFscGhhKTtcbn1cblxuQG1peGluIGNUYW5nZXJpbmVSZ2JhKCRhdHRyaWJ1dGUsICRhbHBoYSkge1xuICAjeyRhdHRyaWJ1dGV9OiByZ2JhKDI1NSwgMTQwLCAwLCAkYWxwaGEpO1xufVxuXG5AbWl4aW4gY0RvZGdlckJsdWVSZ2JhKCRhdHRyaWJ1dGUsICRhbHBoYSkge1xuICAjeyRhdHRyaWJ1dGV9OiByZ2JhKDY2LCAxMzIsIDI0MywgJGFscGhhKTtcbn1cblxuQG1peGluIGNNZWRpdW1HcmVlblJnYmEoJGF0dHJpYnV0ZSwgJGFscGhhKSB7XG4gICN7JGF0dHJpYnV0ZX06IHJnYmEoNTIsIDE2NywgODMsICRhbHBoYSk7XG59XG5cbkBtaXhpbiBjUHVycGx5Qmx1ZVJnYmEoJGF0dHJpYnV0ZSwgJGFscGhhKSB7XG4gICN7JGF0dHJpYnV0ZX06IHJnYmEoMTE1LCAyMCwgMjI2LCAkYWxwaGEpO1xufVxuXG5AbWl4aW4gY0RhcmtHcmF5UmdiYSgkYXR0cmlidXRlLCAkYWxwaGEpIHtcbiAgI3skYXR0cmlidXRlfTogcmdiYSg0NCwgNDUsIDQ4LCAkYWxwaGEpO1xufVxuXG5AbWl4aW4gY0Nvb2xHcmF5UmdiYSgkYXR0cmlidXRlLCAkYWxwaGEpIHtcbiAgI3skYXR0cmlidXRlfTogcmdiYSgxNDksIDE1NiwgMTY1LCAkYWxwaGEpO1xufVxuXG5AbWl4aW4gY1NpbHZlclJnYmEoJGF0dHJpYnV0ZSwgJGFscGhhKSB7XG4gICN7JGF0dHJpYnV0ZX06IHJnYmEoMjM1LCAyMzYsIDIzNiwgJGFscGhhKTtcbn1cblxuQG1peGluIHJlcGxhY2VUZXh0KCkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHRleHQtaW5kZW50OiAtOTk5OTlweDtcbn1cblxuQG1peGluIHRyYWNraW5nKCR2YWwsICRmb250LXNpemUpIHtcbiAgbGV0dGVyLXNwYWNpbmc6ICggJHZhbCAqICRmb250LXNpemUgLyAxMDAwICkgKiAxcHg7XG59XG5cbkBtaXhpbiBwaG90b3Nob3AtbGV0dGVyc3BhY2luZy10by1lbXMoJHZhbCkge1xuICBsZXR0ZXItc3BhY2luZzogKCAkdmFsIC8gMTAwMCApICogMWVtO1xufVxuXG4vLyBjdXN0b20gc2Nyb2xsYmFyXG5AbWl4aW4gc2Nyb2xsYmFyKCRzaXplLCAkZm9yZWdyb3VuZC1jb2xvciwgJGJhY2tncm91bmQtY29sb3I6IHJnYmEoJGZvcmVncm91bmQtY29sb3IsIDAuMjUpKSB7XG4gIC8vIEZvciBHb29nbGUgQ2hyb21lXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgIHdpZHRoOiAgJHNpemU7XG4gICAgICBoZWlnaHQ6ICRzaXplO1xuICB9XG5cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgICAgYmFja2dyb3VuZDogJGZvcmVncm91bmQtY29sb3I7XG4gIH1cblxuICAmOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gICAgICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZC1jb2xvcjtcbiAgfVxuXG4gIC8vIEZvciBJbnRlcm5ldCBFeHBsb3JlclxuICAme1xuICAgIHNjcm9sbGJhci1mYWNlLWNvbG9yOiAkZm9yZWdyb3VuZC1jb2xvcjtcbiAgICBzY3JvbGxiYXItdHJhY2stY29sb3I6ICRiYWNrZ3JvdW5kLWNvbG9yO1xuICB9XG59XG5cbkBmdW5jdGlvbiByZXNwb25zaXZlLWZvbnQoJGJyZWFrcG9pbnQsICRweCkge1xuICBAcmV0dXJuICN7JHB4KjEwMC8kYnJlYWtwb2ludH12dztcbn1cblxuLy8vIGxlYXN0LXNxdWFyZXMtZml0XG4vLy8gQ2FsY3VsYXRlIHRoZSBsZWFzdCBzcXVhcmUgZml0IGxpbmVhciByZWdyZXNzaW9uIG9mIHByb3ZpZGVkIHZhbHVlc1xuLy8vIEBwYXJhbSB7bWFwfSAkbWFwIC0gQSBTYXNzIG1hcCBvZiB2aWV3cG9ydCB3aWR0aCBhbmQgc2l6ZSB2YWx1ZSBjb21iaW5hdGlvbnNcbi8vLyBAcmV0dXJuIExpbmVhciBlcXVhdGlvbiBhcyBhIGNhbGMoKSBmdW5jdGlvblxuLy8vIEBleGFtcGxlXG4vLy8gICBmb250LXNpemU6IGxlYXN0LXNxdWFyZXMtZml0KCg1NzZweDogMjRweCwgNzY4cHg6IDI0cHgsIDk5MnB4OiAzNHB4KSk7XG4vLy8gQGF1dGhvciBKYWtlIFdpbHNvbiA8amFrZS5lLndpbHNvbkBnbWFpbC5jb20+XG5AZnVuY3Rpb24gbGVhc3Qtc3F1YXJlcy1maXQoJG1hcCkge1xuXG4gIC8vIEdldCB0aGUgbnVtYmVyIG9mIHByb3ZpZGVkIGJyZWFrcG9pbnRzXG4gICRsZW5ndGg6IGxlbmd0aChtYXAta2V5cygkbWFwKSk7XG5cbiAgLy8gRXJyb3IgaWYgdGhlIG51bWJlciBvZiBicmVha3BvaW50cyBpcyA8IDJcbiAgQGlmICgkbGVuZ3RoIDwgMikge1xuICAgIEBlcnJvciBcImxlYXN0U3F1YXJlc0ZpdCgpICRtYXAgbXVzdCBiZSBhdCBsZWFzdCAyIHZhbHVlc1wiXG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdGhlIE1lYW5zXG4gICRyZXNUb3RhbDogMDtcbiAgJHZhbHVlVG90YWw6IDA7XG4gIEBlYWNoICRyZXMsICR2YWx1ZSBpbiAkbWFwIHtcbiAgICAkcmVzVG90YWw6ICRyZXNUb3RhbCArICRyZXM7XG4gICAgJHZhbHVlVG90YWw6ICR2YWx1ZVRvdGFsICsgJHZhbHVlO1xuICB9XG4gICRyZXNNZWFuOiAkcmVzVG90YWwvJGxlbmd0aDtcbiAgJHZhbHVlTWVhbjogJHZhbHVlVG90YWwvJGxlbmd0aDtcblxuICAvLyBDYWxjdWxhdGUgc29tZSBvdGhlciBzdHVmZlxuICAkbXVsdGlwbGllZERpZmY6IDA7XG4gICRzcXVhcmVkRGlmZjogMDtcbiAgQGVhY2ggJHJlcywgJHZhbHVlIGluICRtYXAge1xuXG4gICAgLy8gRGlmZmVyZW5jZXMgZnJvbSBtZWFuc1xuICAgICRyZXNEaWZmOiAkcmVzIC0gJHJlc01lYW47XG4gICAgJHZhbHVlRGlmZjogJHZhbHVlIC0gJHZhbHVlTWVhbjtcblxuICAgIC8vIFN1bSBvZiBtdWx0aXBsaWVkIGRpZmZlcmVuY2VzXG4gICAgJG11bHRpcGxpZWREaWZmOiAkbXVsdGlwbGllZERpZmYgKyAoJHJlc0RpZmYgKiAkdmFsdWVEaWZmKTtcblxuICAgIC8vIFN1bSBvZiBzcXVhcmVkIHJlc29sdXRpb24gZGlmZmVyZW5jZXNcbiAgICAkc3F1YXJlZERpZmY6ICRzcXVhcmVkRGlmZiArICgkcmVzRGlmZiAqICRyZXNEaWZmKTtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSB0aGUgU2xvcGVcbiAgJG06ICRtdWx0aXBsaWVkRGlmZiAvICRzcXVhcmVkRGlmZjtcblxuICAvLyBDYWxjdWxhdGUgdGhlIFktSW50ZXJjZXB0XG4gICRiOiAkdmFsdWVNZWFuIC0gKCRtICogJHJlc01lYW4pO1xuXG4gIC8vIFJldHVybiB0aGUgQ1NTIGNhbGMgZXF1YXRpb25cbiAgQHJldHVybiBjYWxjKCN7JG0qMTAwfXZ3ICsgI3skYn0pO1xuXG59XG5cbi8vIHNpbXBsZSBmdW5jdGlvbiB0byBnZXQgYmFjayByZW0gdmFsdWU7XG4vLyBpbiBvdXIgY2FzZSBib2R5IGlzIHNldCB0byA2Mi41JSBzbyBvdXIgYmFzZSBmb250LXNpemUgaXMgYSAxMCBtdWx0aXBsZVxuQGZ1bmN0aW9uIGdldC1yZW0oJGZvbnQtc2l6ZSkge1xuICAgIEByZXR1cm4gJGZvbnQtc2l6ZS8xMCAqIDFyZW07XG59XG5cbi8vIGhlbHBlciBmdW5jdGlvbiB0byBtYWtlIHN1cmUgdGhlIHVuaXQgdHlwZSAocHgsIHJlbSlcbi8vIGlzIHJlbW92ZWQgd2Ugd2FudCBqdXN0IHRoZSByYXcgdmFsdWUgbm8gdW5pdFxuQGZ1bmN0aW9uIGdldC12YWx1ZSgkbikge1xuICAgIEByZXR1cm4gJG4gLyAoJG4gKiAwICsgMSk7XG59XG5cbi8vIHJldHVybiByYXRpbyBsaW5lLWhlaWdodCAvIGZvbnQtc2l6ZVxuQGZ1bmN0aW9uIHVuaXRsZXNzLWxoKCRmb250LXNpemUsICRsaW5lLWhlaWdodCkge1xuICAgQHJldHVybiBnZXQtdmFsdWUoJGxpbmUtaGVpZ2h0IC8gJGZvbnQtc2l6ZSk7XG59XG4vLyBVc2FnZTpcbi8vIC5mb28ge1xuLy8gICAgIGZvbnQtc2l6ZTogMjZweDtcbi8vICAgICBsaW5lLWhlaWdodDogZ2V0LWxpbmUtaGVpZ2h0KDI2cHgsIDMycHgpOyAvLzEuMjMwNzdcbi8vIH1cblxuLy8gbWl4aW5zIGZvciB1c2UgdG8gZWFzaWx5IGlucHV0IEZvbnQgU3R5bGUgR3VpZGVcbi8vIHB4IGlzIG9wdGlvbmFsIHRvbyFcbi8vIGxldHRlciBzcGFjaW5nIGlzIG9wdGlvbmFsIGZvciBzb21lIGVkZ2UgY2FzZXNcbkBtaXhpbiBmb250U3R5bGUoJGZvbnQtc2l6ZSwgJGxpbmUtaGVpZ2h0LCAkbGV0dGVyLXNwYWNpbmc6XCJcIikge1xuXG4gIGZvbnQtc2l6ZTogZ2V0LXJlbShnZXQtdmFsdWUoJGZvbnQtc2l6ZSkpO1xuICBsaW5lLWhlaWdodDogdW5pdGxlc3MtbGgoJGZvbnQtc2l6ZSwgJGxpbmUtaGVpZ2h0KTtcblxuICAvL2Jhc2ljIGNoZWNrIGZvdCBsZXR0ZXIgc3BhY2luZ1xuICBAaWYgJGxldHRlci1zcGFjaW5nICE9IFwiXCIge1xuICAgIEBpZiB1bml0KCRsZXR0ZXItc3BhY2luZykgPT0gJ3B4JyB7XG4gICAgICBsZXR0ZXItc3BhY2luZzogJGxldHRlci1zcGFjaW5nO1xuICAgIH0gQGVsc2V7XG4gICAgICBsZXR0ZXItc3BhY2luZzogJGxldHRlci1zcGFjaW5nICogMXB4O1xuICAgIH1cbiAgfVxufTtcblxuQGZ1bmN0aW9uIGZvcm1hdFNpeHRlZW4tYnktTmluZSgkd2lkdGgpIHtcbiAgQHJldHVybiBjYWxjKCN7JHdpZHRoICogOSAvIDE2fSk7XG59XG5cbiIsIkBpbXBvcnQgJy4uL2ZvbnQtZmFjZXMnO1xuXG4vLyBmb250IGZhbWlsaWVzXG4vLyAkZmYtYmFzZTogJ1Byb2R1Y3RTYW5zLUxpZ2h0JywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XG4kZmYtdGl0bGU6ICdQcm9kdWN0U2Fucy1Cb2xkJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XG4kZmYtYm9sZDogJ1JvYm90by1Cb2xkJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XG4kZmYtcmVndWxhcjogJ1JvYm90by1SZWd1bGFyJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XG4kZmYtbWVkaXVtOiAnUm9ib3RvLU1lZGl1bScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmO1xuXG4kZnctcmVndWxhcjogbm9ybWFsO1xuXG4vLyBmb250IHNpemVzXG4kZnMtYmFzZTogMS40cmVtO1xuXG4vLyBGb250IERlZmluaXRpb25zXG5cbi8vIEBtaXhpbiBmZkxpZ2h0KCkge1xuLy8gXHRmb250LWZhbWlseTogJGZmLWJhc2U7XG4vLyBcdGZvbnQtd2VpZ2h0OiAzMDA7XG4vLyBcdGZvbnQtc3R5bGU6IG5vcm1hbDtcbi8vIH1cblxuJGxzLXRpdGxlOiAtMC41cHg7XG4kbHMtYm9keTogMHB4O1xuJGxzLWFsbGNhcHM6IDAuNXB4O1xuJGxzLXNlYXJjaDogLTFweDtcbiRscy1zaWRlYmFyOiAwLjJweDtcblxuQG1peGluIGZmUmVndWxhcigpIHtcblx0Zm9udC1mYW1pbHk6ICRmZi1yZWd1bGFyO1xuXHRmb250LXdlaWdodDogbm9ybWFsO1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG59XG5cbkBtaXhpbiBmZk1lZGl1bSgpIHtcblx0Zm9udC1mYW1pbHk6ICRmZi1tZWRpdW07XG5cdGZvbnQtd2VpZ2h0OiA1MDA7XG5cdGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cblxuQG1peGluIGZmQm9sZCgpIHtcblx0Zm9udC1mYW1pbHk6ICRmZi1ib2xkO1xuXHRmb250LXdlaWdodDogYm9sZDtcblx0Zm9udC1zdHlsZTogbm9ybWFsO1xufVxuXG5AbWl4aW4gZmZUaXRsZSgpIHtcblx0Zm9udC1mYW1pbHk6ICRmZi10aXRsZTtcblx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cblxuIiwiXG5AZm9udC1mYWNlIHtcblx0Zm9udC1mYW1pbHk6IFwiUm9ib3RvLVJlZ3VsYXJcIjtcblx0c3JjOnVybChcIi9hc3NldHMvZm9udHMvUm9ib3RvLVJlZ3VsYXIuZW90XCIpO1xuXHRzcmM6dXJsKFwiL2Fzc2V0cy9mb250cy9Sb2JvdG8tUmVndWxhci5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLFxuXHRcdFx0dXJsKFwiL2Fzc2V0cy9mb250cy9Sb2JvdG8tUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksXG5cdFx0XHR1cmwoJy9hc3NldHMvZm9udHMvUm9ib3RvLVJlZ3VsYXIudHRmJykgIGZvcm1hdCgndHJ1ZXR5cGUnKSxcblx0XHRcdHVybCgnL2Fzc2V0cy9mb250cy8vUm9ib3RvLVJlZ3VsYXIuc3ZnIzBjNzMxODU0YThiNWU5NzdiNzVmNDgzMTdlYjY4N2M4JykgZm9ybWF0KCdzdmcnKTtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0Zm9udC1zdHlsZTogbm9ybWFsO1xufSIsIiR6LWhlYWRlcjogMTA7XG4kei1tZW51LW92ZXJsYXk6IDk7XG4kei1oZWFkZXItY29udHJvbDogMTE7XG4iLCIvLyBjb2xvcnNcbiRjLXdoaXRlXHRcdFx0OiAjRkZGO1xuJGMtYmxhY2tcdFx0XHQ6ICMwMDA7XG4kYy1kYXJrLWdyZXlcdFx0OiAjMmIyZDMwO1xuXG4kYy10YW5nZXJpbmVcdFx0OiAjZmY4YzAwO1xuIiwiLy8gRWFzaW5nXG5cbiRxdWFkLWVhc2UtaW4gICAgICAgICAgICAgOmN1YmljLWJlemllcigwLjU1MCwgMC4wODUsIDAuNjgwLCAwLjUzMCk7XG4kY3ViaWMtZWFzZS1pbiAgICAgICAgICAgIDpjdWJpYy1iZXppZXIoMC41NTAsIDAuMDU1LCAwLjY3NSwgMC4xOTApO1xuJHF1YXJ0LWVhc2UtaW4gICAgICAgICAgICA6Y3ViaWMtYmV6aWVyKDAuODk1LCAwLjAzMCwgMC42ODUsIDAuMjIwKTtcbiRxdWludC1lYXNlLWluICAgICAgICAgICAgOmN1YmljLWJlemllcigwLjc1NSwgMC4wNTAsIDAuODU1LCAwLjA2MCk7XG4kc2luZS1lYXNlLWluICAgICAgICAgICAgIDpjdWJpYy1iZXppZXIoMC40NzAsIDAuMDAwLCAwLjc0NSwgMC43MTUpO1xuJGV4cG8tZWFzZS1pbiAgICAgICAgICAgICA6Y3ViaWMtYmV6aWVyKDAuOTUwLCAwLjA1MCwgMC43OTUsIDAuMDM1KTtcbiRjaXJjLWVhc2UtaW4gICAgICAgICAgICAgOmN1YmljLWJlemllcigwLjYwMCwgMC4wNDAsIDAuOTgwLCAwLjMzNSk7XG4kYmFjay1lYXNlLWluICAgICAgICAgICAgIDpjdWJpYy1iZXppZXIoMC42MDAsIC0wLjI4MCwgMC43MzUsIDAuMDQ1KTtcblxuJHF1YWQtZWFzZS1vdXQgICAgICAgICAgICA6Y3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKTtcbiRjdWJpYy1lYXNlLW91dCAgICAgICAgICAgOmN1YmljLWJlemllcigwLjIxNSwgMC42MTAsIDAuMzU1LCAxLjAwMCk7XG4kcXVhcnQtZWFzZS1vdXQgICAgICAgICAgIDpjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQwLCAwLjQ0MCwgMS4wMDApO1xuJHF1aW50LWVhc2Utb3V0ICAgICAgICAgICA6Y3ViaWMtYmV6aWVyKDAuMjMwLCAxLjAwMCwgMC4zMjAsIDEuMDAwKTtcbiRzaW5lLWVhc2Utb3V0ICAgICAgICAgICAgOmN1YmljLWJlemllcigwLjM5MCwgMC41NzUsIDAuNTY1LCAxLjAwMCk7XG4kZXhwby1lYXNlLW91dCAgICAgICAgICAgIDpjdWJpYy1iZXppZXIoMC4xOTAsIDEuMDAwLCAwLjIyMCwgMS4wMDApO1xuJGNpcmMtZWFzZS1vdXQgICAgICAgICAgICA6Y3ViaWMtYmV6aWVyKDAuMDc1LCAwLjgyMCwgMC4xNjUsIDEuMDAwKTtcbiRiYWNrLWVhc2Utb3V0ICAgICAgICAgICAgOmN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIwLCAxLjI3NSk7XG5cbiRxdWFkLWVhc2UtaW4tb3V0ICAgICAgICAgOmN1YmljLWJlemllcigwLjQ1NSwgMC4wMzAsIDAuNTE1LCAwLjk1NSk7XG4kY3ViaWMtZWFzZS1pbi1vdXQgICAgICAgIDpjdWJpYy1iZXppZXIoMC42NDUsIDAuMDQ1LCAwLjM1NSwgMS4wMDApO1xuJHF1YXJ0LWVhc2UtaW4tb3V0ICAgICAgICA6Y3ViaWMtYmV6aWVyKDAuNzcwLCAwLjAwMCwgMC4xNzUsIDEuMDAwKTtcbiRxdWludC1lYXNlLWluLW91dCAgICAgICAgOmN1YmljLWJlemllcigwLjg2MCwgMC4wMDAsIDAuMDcwLCAxLjAwMCk7XG4kc2luZS1lYXNlLWluLW91dCAgICAgICAgIDpjdWJpYy1iZXppZXIoMC40NDUsIDAuMDUwLCAwLjU1MCwgMC45NTApO1xuJGV4cG8tZWFzZS1pbi1vdXQgICAgICAgICA6Y3ViaWMtYmV6aWVyKDEuMDAwLCAwLjAwMCwgMC4wMDAsIDEuMDAwKTtcbiRjaXJjLWVhc2UtaW4tb3V0ICAgICAgICAgOmN1YmljLWJlemllcigwLjc4NSwgMC4xMzUsIDAuMTUwLCAwLjg2MCk7XG5cbiRjdWJpYy1vdXQtdHJhbnNpdGlvbiAgICAgICAgIDogMC4zcyAkY3ViaWMtZWFzZS1vdXQ7XG4kZGVmYXVsdC1pbm91dC10cmFuc2l0aW9uICAgICA6IDAuNXMgZWFzZS1pbi1vdXQ7XG4iLCIvLyBoZWlnaHRzXG4kaGVhZGVyLW1vYmlsZS1oZWlnaHQ6IDU2cHg7XG4kaGVhZGVyLXRhYmxldC1oZWlnaHQ6IDU2cHg7XG5cbiRuYXYtcGFkZGluZzogMjRweDtcbiRuYXYtaXRlbS1tYXJnaW46IDM2cHg7XG5cbiRuYXYtcGFkZGluZy1tb2JpbGUtdG9wOiAxOHB4O1xuJG5hdi1wYWRkaW5nLW1vYmlsZS1sZWZ0OiAxNnB4O1xuXG5cbi8vIHdpZHRoXG4kc2lkZWJhci13aWR0aDogOTBweDtcbiRzaWRlYmFyLXdpZHRoLWhvbWVwYWdlOiAyNDRweDtcbiIsIi8vIGJyZWFrIHBvaW50c1xuJGJwLW1pbjogMzYwO1xuJGJwLWxvd3BvaW50OiAzNzU7XG4kYnAtbG93LW1vYmlsZTogNDAwO1xuJGJwLW1vYmlsZTogNDgwO1xuJGJwLW1pbi1oZWlnaHQ6IDY1MDtcbiRicC1taWRwb2ludDogNjAwO1xuJGJwLW1pZHBvaW50LWg6IDcwMDtcbiRicC10YWJsZXQ6IDc2ODtcbiRicC10YWJsZXQtYmlnOiA4NTA7XG4kYnAtbGFwdG9wOiA5OTI7XG4kYnAtdGFibGV0LWg6IDEwMjQ7XG4kYnAtZGVza3RvcDogMTI2MDtcbiRicC1kZXNrdG9wLW06IDE0NDA7XG4kYnAtZGVza3RvcC1sOiAxNjgwO1xuJGJwLWRlc2t0b3AteGw6IDE5MjA7XG5cbi8vIG1lZGlhIHF1ZXJpZXNcbiRtcS1taW46ICcobWF4LXdpZHRoOiAjeyRicC1taW59cHgpJztcbiRtcS1tb2JpbGU6ICcobWF4LXdpZHRoOiAjeyRicC1tb2JpbGV9cHgpJztcbiRtcS10YWJsZXQtZG93bjogJyhtYXgtd2lkdGg6ICN7JGJwLXRhYmxldC1ofXB4KSc7XG4kbXEtdGFibGV0LXJhbmdlOiAnKG1pbi13aWR0aDogI3skYnAtbW9iaWxlICsgMX1weCkgYW5kIChtYXgtd2lkdGg6ICN7JGJwLXRhYmxldH1weCknO1xuJG1xLXRhYmxldDogJyhtYXgtd2lkdGg6ICN7JGJwLXRhYmxldH1weCknO1xuJG1xLXRhYmxldC1oOiAnKG1heC13aWR0aDogI3skYnAtdGFibGV0LWh9cHgpJztcbiRtcS10YWJsZXQtbDogJyhtaW4td2lkdGg6ICN7JGJwLXRhYmxldH1weCknO1xuJG1xLWxhcHRvcDogJyhtYXgtd2lkdGg6ICN7JGJwLWxhcHRvcH1weCknO1xuJG1xLWRlc2t0b3A6ICcobWF4LXdpZHRoOiAjeyRicC1kZXNrdG9wfXB4KSc7XG4kbXEtZGVza3RvcC1tOiAnKG1heC13aWR0aDogI3skYnAtZGVza3RvcC1tfXB4KSc7XG4kbXEtZGVza3RvcC1tLXN1cDogJyhtaW4td2lkdGg6ICN7JGJwLWRlc2t0b3AtbX1weCknO1xuJG1xLWRlc2t0b3AtbDogJyhtaW4td2lkdGg6ICN7JGJwLWRlc2t0b3AtbH1weCknO1xuXG4kbXEtbW9iaWxlLWxhbmRzY2FwZTogJyhtYXgtd2lkdGg6ICN7JGJwLXRhYmxldH1weCkgYW5kIChtYXgtaGVpZ2h0OiAjeyRicC1tb2JpbGV9cHgpJztcblxuJG1xLWRlc2t0b3AtaDogJyhtYXgtaGVpZ2h0OiAjeyRicC10YWJsZXQtYmlnfXB4KSBhbmQgKG1pbi13aWR0aDogI3skYnAtbW9iaWxlfXB4KSc7XG4kbXEtbGFwdG9wLWg6ICcobWF4LWhlaWdodDogI3skYnAtdGFibGV0fXB4KSBhbmQgKG1pbi13aWR0aDogI3skYnAtbGFwdG9wfXB4KSc7XG4kbXEtbGFwdG9wLWgtZGVza3RvcDogJyhtYXgtaGVpZ2h0OiAjeyRicC1taW4taGVpZ2h0fXB4KSBhbmQgKG1pbi13aWR0aDogI3skYnAtZGVza3RvcC1tfXB4KSc7XG4kbXEtbW9iaWxlLWg6ICcobWF4LWhlaWdodDogI3skYnAtbWlkcG9pbnQtaH1weCkgYW5kIChtYXgtd2lkdGg6ICN7JGJwLW1vYmlsZX1weCknO1xuJG1xLXRhYmxldC1oZWlnaHQ6ICcobWF4LWhlaWdodDogI3skYnAtbW9iaWxlfXB4KSBhbmQgKG1pbi13aWR0aDogI3skYnAtbWlkcG9pbnR9cHgpJztcbiRsb3ctaDogJyhtYXgtaGVpZ2h0OiAjeyRicC1sb3ctbW9iaWxlfXB4KSBhbmQgKG1heC13aWR0aDogI3skYnAtbWlkcG9pbnR9cHgpJztcbiRtcS1zaG9ydC1kZXNrdG9wOiAnKG1heC1oZWlnaHQ6ICN7JGJwLXRhYmxldH1weCkgYW5kIChtaW4td2lkdGg6ICN7JGJwLXRhYmxldH1weCknO1xuJG1xLXNtYWxsLWhlaWdodDogJyhtYXgtaGVpZ2h0OiAjeyRicC1taW4taGVpZ2h0fXB4KSBhbmQgKG1pbi13aWR0aDogI3skYnAtdGFibGV0fXB4KSc7XG4kbXEtc21hbGwtaGVpZ2h0LW1vYmlsZTogJyhtYXgtaGVpZ2h0OiAjeyRicC1taWRwb2ludH1weCkgYW5kIChtYXgtd2lkdGg6ICN7JGJwLW1vYmlsZX1weCknO1xuIiwiLnZlcnRpY2FsLWFsaWduLXdyYXBwZXIge1xuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4iLCIkZ3V0dGVyOiAxNTtcblxuLypcbiAgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgZmxleCwgY2hlY2sgb3V0IENocmlzIENveWllcidzIGFydGljbGU6IGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cbiAgQmFzZWQgb24gLT4gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9jc3MvZmxleGJveGdyaWQuY3NzXG4qL1xuLyogLS0tLSBGbGV4IGFsaWdubWVudCBjbGFzc2VzIC0tLS0gKi9cbi5yb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIHdpZHRoOiAxMDAlO1xuICAmLnJldmVyc2Uge1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgfVxuICAmLmZ1bGwge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gICYuc2hvdy1vdmVybGF5IHtcbiAgICAvLyBTaG93IHRoZSBncmlkIG92ZXJsYXkgYmxvY2tzIHdpdGggY29sb3JcbiAgICBbY2xhc3MqPSdjb2wtJ10ge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgei1pbmRleDogMTAwO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIxNSwgMjE1LCAyMTUsIDAuNSk7XG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAjeyRndXR0ZXIgKyBweH0pO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4uY29sIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgJi5yZXZlcnNlIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gIH1cbn1cbi8qIFZlcnRpY2FsIEFsaWduICovXG4udmVydGljYWwtYWxpZ24td3JhcHBlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuLyogSnVzdGlmeS1jb250ZW50ICovXG4uc3RhcnQge1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG59XG4uY2VudGVyIHtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG4uZW5kIHtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbn1cbi5hcm91bmQge1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbn1cbi5iZXR3ZWVuIHtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuLyogQWxpZ24taXRlbXMgKi9cbi50b3Age1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbn1cbi5taWRkbGUge1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLmJvdHRvbSB7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbn1cbi5jb2x1bW4ge1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuLyogT3JkZXIgKi9cbi5maXJzdCB7XG4gIG9yZGVyOiAtMTtcbn1cbi5sYXN0IHtcbiAgb3JkZXI6IDE7XG59XG4iLCJAbWl4aW4gc2Nyb2xsKCRzY3JvbGwsICRibG9jaykge1xuXHRvdmVyZmxvdy0jeyRzY3JvbGx9OiBhdXRvO1xuXHRvdmVyZmxvdy0jeyRibG9ja306IGhpZGRlbjtcblx0LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xufVxuXG4udS1zY3JvbGwtdiB7XG5cdEBpbmNsdWRlIHNjcm9sbCgneScsICd4Jyk7XG59XG5cbi51LXNjcm9sbC1oIHtcblx0QGluY2x1ZGUgc2Nyb2xsKCd4JywgJ3knKTtcbn1cblxuLnUtc2Nyb2xsLXBhc3Qge1xuXHRoZWlnaHQ6IDEwMHZoICFpbXBvcnRhbnQ7XG5cdG1hcmdpbi1ib3R0b206IDE1MHB4O1xufVxuIiwiKiB7XG5cdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcblx0Ym9yZGVyOiAwIG5vbmU7XG5cdG91dGxpbmU6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLCB0YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmRlbCwgZGZuLCBlbSwgZm9udCwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCwgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSwgYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSwgZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsIGJ1dHRvbiB7XG5cdEBpbmNsdWRlIGZmUmVndWxhcigpO1xuXHRjb2xvcjogJGMtZGFyay1ncmV5O1xuXHRmb250LXNpemU6ICRmcy1iYXNlO1xuXHRsaW5lLWhlaWdodDogMS44Njtcblx0bGV0dGVyLXNwYWNpbmc6IDAuM3B4O1xuXHRmb250LXdlaWdodDogbm9ybWFsO1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG5cdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcblx0Ym9yZGVyOiAwIG5vbmU7XG5cdG91dGxpbmU6IDA7XG5cdHBhZGRpbmc6IDA7XG5cdG1hcmdpbjogMDtcbn1cblxuYnV0dG9uIHtcblx0Ym9yZGVyOiBub25lO1xuXHRib3JkZXItcmFkaXVzOiAwO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0Y3Vyc29yOiBwb2ludGVyO1xufVxuXG5bcm9sZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwiYnV0dG9uXCJdLFxuYnV0dG9uIHtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyogUmVzZXQgYGJ1dHRvbmAgYW5kIGJ1dHRvbi1zdHlsZSBgaW5wdXRgIGRlZmF1bHQgc3R5bGVzICovXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdLFxuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmJ1dHRvbiB7XG4gICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICBib3JkZXI6IDA7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgLyogY3Vyc29yOiBkZWZhdWx0OyAqL1xuICAgIGZvbnQ6IGluaGVyaXQ7XG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiBmb3IgaW5wdXQgKi9cbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOyAvKiBmb3IgYnV0dG9uICovXG4gICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xufVxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIsXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIGJvcmRlcjogMDtcbiAgICBwYWRkaW5nOiAwO1xufVxuXG5cbmxpIHtcblx0bGlzdC1zdHlsZTogbm9uZTtcbn1cblxuYSB7XG5cdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXHRsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuIiwiLy8gRm9udHMgc2l6ZVxuXG4vKlxuIEkgaGFkIHRvIGRlZmluZSBAbWl4aW4gdG8gYmUgYWJsZSB0byByZS11c2UgdGhlbSBpbiBfcmVwb25zaXZlLXV0aWxzLlxuIGl0J3Mgbm90IG9wdGltaXplZCBhcyBpdCBnZW5lcmF0ZXMgMiBkaWZmZXJlbnQgY2xhc3NlcywgYnV0IGl0IGRvZXMgdGhlIGpvYlxuKi9cblxuXG4uLS1za2V3LXVwIHtcbiAgdHJhbnNmb3JtOiBza2V3WSgtMTVkZWcpO1xufVxuXG4vKiBGb290ZXIgKi9cbi8vIGZvb3Rlci1saW5rc1xuLy8gZm9vdGVyLW1vYmlsZS00ODBcbkBtaXhpbiBmLWZvb3Rlci1yZWd1bGFyMTQoKSB7XG5cdGNvbG9yOiAkYy13aGl0ZTtcblx0QGluY2x1ZGUgZmZSZWd1bGFyKCk7XG5cdEBpbmNsdWRlIGZvbnRTdHlsZSgxNCwyMiwkbHMtYm9keSk7XG59XG4uLS1mLWZvb3Rlci1yZWd1bGFyMTQge1xuXHRAaW5jbHVkZSBmLWZvb3Rlci1yZWd1bGFyMTQoKTtcbn1cblxuLy8gRk9PVEVSXG4vLyBmb290ZXItbW9iaWxlLTMyMFxuQG1peGluIGYtZm9vdGVyLXJlZ3VsYXIxMCgpIHtcblx0Y29sb3I6ICRjLXdoaXRlO1xuXHRAaW5jbHVkZSBmZlJlZ3VsYXIoKTtcblx0QGluY2x1ZGUgZm9udFN0eWxlKDEwLDE2LCRscy1ib2R5KTtcbn1cbi4tLWYtZm9vdGVyLXJlZ3VsYXIxMCB7XG5cdEBpbmNsdWRlIGYtZm9vdGVyLXJlZ3VsYXIxMCgpO1xufVxuXG5AbWl4aW4gZi1mb290ZXItcmVndWxhcjEyKCkge1xuXHRAaW5jbHVkZSBmZlJlZ3VsYXIoKTtcblx0QGluY2x1ZGUgZm9udFN0eWxlKDEyLDEzLCRscy1ib2R5KTtcbn1cbi4tLWYtZm9vdGVyLXJlZ3VsYXIxMiB7XG5cdEBpbmNsdWRlIGYtZm9vdGVyLXJlZ3VsYXIxMigpO1xufVxuXG4vLyBGb250IGNvbG9yXG4uLS1jLXdoaXRlIHtcblx0Y29sb3I6ICRjLXdoaXRlO1xufVxuLi0tYy1ibGFjayB7XG5cdGNvbG9yOiAkYy1ibGFjaztcbn1cblxuLi0tYy10YW5nZXJpbmUge1xuXHRjb2xvcjogJGMtdGFuZ2VyaW5lO1xufVxuIiwiaHRtbCB7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGZvbnQtc2l6ZTogNjIuNSU7XG5cdC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcblx0LXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG5cdHVzZXItc2VsZWN0OiBub25lO1xufVxuXG5ib2R5IHtcblxuICBcdG92ZXJmbG93OmhpZGRlbjtcblx0YmFja2dyb3VuZC1jb2xvcjogJGMtd2hpdGU7XG5cdC8vIGJhY2tncm91bmQtY29sb3I6ICRjLXdoaXRlO1xuXG5cdC8vIGRlZmF1bHRcblx0Ly8gQGV4dGVuZCAuLS1mLXJlZ3VsYXIxNDtcblx0Ly8gQGV4dGVuZCAuLS1jLWRhcmstZ3JleTtcblxuXHQmLnNjcm9sbC1lbmFibGVke1xuXHRcdGhlaWdodDogYXV0bztcblx0XHRvdmVyZmxvdzogYXV0bztcblx0fVxuXG5cdC5ibG9jay1ldmVudHMge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lICFpbXBvcnRhbnQ7XG5cdH1cblxuXHQvLyB3aGVuIGEgbW9kYWwgbmVlZCB0byB0cmlnZ2VyIGRlZmF1dCBicm93c2VyIHNjcm9sbFxuXHQvLyBleCA6IGFib3V0IG1vZGFsXG5cdCYubW9kYWwtc2Nyb2xse1xuXG5cdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdG92ZXJmbG93OiBhdXRvO1xuXG5cdFx0I2NvbnRlbnR7XG5cdFx0XHRoZWlnaHQ6IDBweDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0fVxuXHRcdCNjb250ZW50e1xuXHRcdFx0aGVpZ2h0OiAwcHg7XG5cdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdH1cblx0XHQjcGFyYWRlLWRldGFpbC1nb29nbGUtbWFwcy1jb250YWluZXJ7XG5cdFx0XHRoZWlnaHQ6IDBweDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0fVxuXHRcdCNtb2RhbC1jb250YWluZXJ7XG5cdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0XHRcdC5tb2RhbC1jb250ZW50LWNvbnRhaW5lcntcblx0XHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG5cdFx0XHRcdC5tb2RhbHtcblx0XHRcdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTI1ODg3Ny9maXhlZC1lbGVtZW50LWRpc2FwcGVhcnMtaW4tY2hyb21lXG5AbWVkaWEgI3skbXEtdGFibGV0fSB7XG5cdGh0bWwsIGJvZHkge2hlaWdodDoxMDAlO292ZXJmbG93OmF1dG99XG59XG5cbiNjb250ZW50IHtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHQvLyBwb3NpdGlvbjogZml4ZWQ7XG5cdHotaW5kZXg6IDU7XG5cdHRvcDogMDtcblx0cmlnaHQ6IDA7XG5cdGxlZnQ6IDA7XG5cdGJvdHRvbTogMDtcblx0Ly8gb3ZlcmZsb3c6IHNjcm9sbDtcblx0Ly8gaGVpZ2h0OiAxMDB2aDtcblxuXHQvLyBiZWNhdXNlIG9mIGhlYWRlclxuXHRAbWVkaWEgI3skbXEtdGFibGV0fSB7XG5cdCAgICB0b3A6ICRoZWFkZXItdGFibGV0LWhlaWdodDtcblx0ICAgIC8vIGhlaWdodDogY2FsYygxMDB2aCAtICN7JGhlYWRlci10YWJsZXQtaGVpZ2h0fSk7XG5cdH1cblxuXHQvLyBiZWNhdXNlIG9mIGhlYWRlclxuXHRAbWVkaWEgI3skbXEtbW9iaWxlfSB7XG5cdCAgICB0b3A6ICRoZWFkZXItbW9iaWxlLWhlaWdodDtcblx0ICAgIC8vIGhlaWdodDogY2FsYygxMDB2aCAtICN7JGhlYWRlci1tb2JpbGUtaGVpZ2h0fSk7XG5cdH1cblxuXHQvLyA+IHNlY3Rpb24ge1xuXHQvLyBcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0Ly8gXHR6LWluZGV4OiA1O1xuXHQvLyB9XG59XG5cbi5yZXNldC1tZy1pbmxpbmUge1xuXHRmb250LXNpemU6IDA7XG59XG5cbi8vIC4tLWJ0bi1zdGQge1xuLy8gXHRAZXh0ZW5kIC4tLWYtYnV0dG9uLW1lZGl1bTE2O1xuLy8gXHQvLyBAZXh0ZW5kIC4tLWYtYnV0dG9uLW1lZGl1bTE0O1xuLy8gXHRiYWNrZ3JvdW5kLWNvbG9yOiAkYy1kb2RnZXItYmx1ZTtcbi8vIFx0cGFkZGluZzogMTRweCAyNHB4IDE0cHggMjRweDtcbi8vIFx0dHJhbnNpdGlvbjogYWxsICRjdWJpYy1vdXQtdHJhbnNpdGlvbjtcbi8vIFx0Y29sb3I6ICRjLXdoaXRlO1xuLy8gXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuLy8gXHRib3JkZXItcmFkaXVzOiAycHg7XG5cbi8vIFx0Jjpob3ZlciB7XG4vLyBcdFx0YmFja2dyb3VuZC1jb2xvcjogJGMtZG9kZ2VyLWJsdWUtaG92ZXI7XG4vLyBcdH1cblxuLy8gXHQvLyAxMDI0XG4vLyBcdEBtZWRpYSAjeyRtcS10YWJsZXQtaH0ge1xuLy8gXHQgICAgcGFkZGluZzogMTRweCAyNHB4IDE0cHggMjRweDtcbi8vIFx0fVxuXG4vLyBcdC8vIDc2OFxuLy8gXHRAbWVkaWEgI3skbXEtdGFibGV0fSB7XG4vLyBcdCAgICAvLyBwYWRkaW5nOiAxNnB4IDQwcHggMTRweCAzN3B4O1xuLy8gXHQgICBcdHBhZGRpbmc6IDE0cHggMjRweCAxNHB4IDI0cHg7XG4vLyBcdH1cblxuLy8gXHQvLyAzMjBcbi8vIFx0QG1lZGlhICN7JG1xLW1pbn0ge1xuLy8gXHRcdC8vIEBleHRlbmQgLi0tZi1idXR0b24tbWVkaXVtMTQ7XG4vLyBcdFx0cGFkZGluZzogMTVweCAyNHB4IDE1cHggMjRweDtcbi8vIFx0XHRAaW5jbHVkZSBmLWJ1dHRvbi1tZWRpdW0xNCgpO1xuLy8gXHR9XG5cbi8vIH1cblxuLy8gLmxpbmt7XG4vLyBcdEBleHRlbmQgLi0tZmYtbGluaztcbi8vIFx0Ly9jb2xvcjogJGMtY2hhcmNvYWwtZ3JleTtcbi8vIFx0dHJhbnNpdGlvbjogb3BhY2l0eSAkZGVmYXVsdC1pbm91dC10cmFuc2l0aW9uO1xuXG4vLyBcdCY6aG92ZXJ7XG4vLyBcdFx0b3BhY2l0eTogMC41NDtcbi8vIFx0fVxuLy8gfVxuIiwiXG4vLyAuLS1mZi1pbnRyby10aXRsZSB7XG4vLyBcdEBpbmNsdWRlIGYtYm9sZDEwMCgpO1xuXG4vLyBcdC8vIDEwMjRcbi8vIFx0QG1lZGlhICN7JG1xLXRhYmxldC1ofSB7XG4vLyBcdCAgICBAaW5jbHVkZSBmLWJvbGQxMDAoKTtcbi8vIFx0fVxuXG4vLyBcdC8vIDc2OFxuLy8gXHRAbWVkaWEgI3skbXEtdGFibGV0fSB7XG4vLyBcdCAgICBAaW5jbHVkZSBmLWJvbGQxMDAoKTtcbi8vIFx0fVxuXG4vLyBcdC8vIDQ4MFxuLy8gXHRAbWVkaWEgI3skbXEtbW9iaWxlfSB7XG4vLyBcdCAgICBAaW5jbHVkZSBmLWJvbGQ1NCgpO1xuLy8gXHR9XG5cbi8vIFx0Ly8gMzIwXG4vLyBcdEBtZWRpYSAjeyRtcS1taW59IHtcbi8vIFx0ICAgIEBpbmNsdWRlIGYtc2VhcmNoLWJvbGQzMigpO1xuLy8gXHR9XG4vLyB9IiwiI21haW4tbmF2IHtcblxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHotaW5kZXg6IDk5O1xuXG5cdGhlYWRlciB7XG5cblx0XHQvLyBwb2ludGVyLWV2ZW50czogYXV0bztcblx0XHRwYWRkaW5nLXRvcDogJG5hdi1wYWRkaW5nIC0gMXB4O1xuXHRcdHBhZGRpbmctbGVmdDogJG5hdi1wYWRkaW5nO1xuXG5cdFx0QG1lZGlhICN7JG1xLXRhYmxldH0ge1xuXHRcdFx0cGFkZGluZy10b3A6IDBweDtcblx0XHRcdHBhZGRpbmctYm90dG9tOiAkaGVhZGVyLXRhYmxldC1oZWlnaHQ7XG5cdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkYy13aGl0ZTtcblx0XHR9XG5cblx0XHRAbWVkaWEgI3skbXEtbW9iaWxlfSB7XG5cdFx0XHRwYWRkaW5nLXRvcDogMHB4O1xuXHRcdFx0cGFkZGluZy1ib3R0b206ICRoZWFkZXItbW9iaWxlLWhlaWdodDtcblx0XHR9XG5cblx0XHR1bHtcblxuXHRcdFx0YnV0dG9uLCBhIHtcblx0XHRcdFx0bWFyZ2luLXJpZ2h0OiAkbmF2LWl0ZW0tbWFyZ2luO1xuXHRcdFx0XHR0cmFuc2l0aW9uOiBvcGFjaXR5ICRkZWZhdWx0LWlub3V0LXRyYW5zaXRpb247XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG4iLCIvLyBHbG9iYWwgRm9vdGVyXG4jZm9vdGVyLWNvbnRhaW5lcntcbiAgXG59XG4iLCIucGFnZS13cmFwcGVye1xuXHRtYXJnaW4tdG9wOiAxMDBweDtcbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFFd0JBOzs7O0dBSUc7QUFpQkg7OztHQUdHO0FBNFFIOzs7OztHQUtHO0FFaFVILFVBQVU7RUFDVCxXQUFXLEVBQUUsZ0JBQWdCO0VBQzdCLEdBQUcsRUFBQyx1Q0FBdUM7RUFDM0MsR0FBRyxFQUFDLDhDQUE4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 */
