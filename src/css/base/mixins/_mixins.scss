@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

/*
 * $size: size in pixel you want to have at $breakpoint
 * $min-size: min size of the responsive font: doesn't go smaller
 * $breakpoint: breakpoint to start using responsive fontSize
 */
@mixin fontSize($size, $breakpoint, $min-size: false) {
	// value for vw
	$responsive: $size * 100 / $breakpoint;

	// min value
  @if $min-size {
		$min-width: ($min-size * 100) / $responsive;

		@media screen and (max-width: #{$min-width} * 1px) {
		  font-size: $min-size * 1px;
		}
	}

	font-size: $responsive * 1vw;
}

/*
 * Flexbox Grid generator
 *
 */
@mixin generateGrid($size, $min-colums, $max-colums, $gutter, $grid-column, $grid-width) {

  $column-percent: $grid-column / $grid-width * 100;
  $gutter-percent: $gutter / $grid-width * 100;

  @for $i from $min-colums through $max-colums {

    // formula : I x column percent + i-1 * gutter percent
    $currentPercent:0;
    $currentPercentWithGutter:0;
    @if $i == $max-colums {
      $currentPercent: 100;
      $currentPercentWithGutter: 100;
    } @else {
      $currentPercent: $i * $column-percent + ($i - 1) * $gutter-percent;
      $currentPercentWithGutter: $i * $column-percent + $i * $gutter-percent;
    }

    $vwValue: $currentPercent * 1vw;
    $vwValueWithGutter: $currentPercentWithGutter * 1vw;

    $percentValue: $currentPercent * 1%;
    $percentValueWithGutter: $currentPercentWithGutter * 1%;

    $currentGutterPercent: $i * $gutter-percent;
    $vwValueGutter: $currentGutterPercent * 1vw;

    // %
    .col-#{$size}-#{$i} {
      flex-basis: $percentValue;
      width: $percentValue;
      max-width: $percentValue;
      padding-right: $gutter + px;

      &.no-gutter{
        padding: 0;
      }

    }

    // % + gutter included inside the column
    .col-gutterincluded-#{$size}-#{$i} {
      flex-basis: $percentValueWithGutter;
      width: $percentValueWithGutter;
      max-width: $percentValueWithGutter;
      padding-right: 0;
    }

    .col-#{$size}-offset-#{$i} {
      margin: $percentValue;
      margin-bottom: 0;
      margin-right: 0;
      margin-top: 0;
    }

    .gutter-#{$size}-#{$i} {
        margin-right: $gutter-percent * 1%;
    }

    .off-#{$size}-#{$i} {
      @if $i > 0 {
        margin-left: $percentValue;
      }
    }
    .off-r-#{$size}-#{$i} {
      @if $i > 0 {
        margin-right: $percentValue;
      }
    }

    .off-gutter-#{$size}-#{$i} {
      @if $i > 0 {
        @if $i == $max-colums {
          margin-left: 100%;
        } @else {
          margin-left: 1% * ($i * $column-percent + $i * $gutter-percent);
        }
      }
    }

    // 1 column + 2 gutter offset
    .off-doublegutter-#{$size}-#{$i} {
      @if $i > 0 {
        @if $i == $max-colums {
          margin-left: 100%;
        } @else {
          margin-left: 1% * ($i * $column-percent + ($i + 1) * $gutter-percent);
        }
      }
    }

    .off-gutter-r-#{$size}-#{$i} {
      @if $i > 0 {
        @if $i == $max-colums {
          margin-right: 100%;
        } @else {
          margin-right: 1% * ($i * $column-percent + $i * $gutter-percent);
        }
      }
    }

    // 1 column + 2 gutter offset
    .off-doublegutter-r-#{$size}-#{$i} {
      @if $i > 0 {
        @if $i == $max-colums {
          margin-left: 100%;
        } @else {
          margin-left: 1% * ($i * $column-percent + ($i + 1) * $gutter-percent);
        }
      }
    }


    // root
    .col-root-#{$size}-#{$i} {
      flex-basis: $vwValue;
      width: $vwValue;
      max-width: $vwValue;
      padding-right: $gutter + px;
    }

    .col-root-with-gutter-#{$size}-#{$i} {
      flex-basis: $vwValueWithGutter;
      width: $vwValueWithGutter;
      max-width: $vwValueWithGutter;
    }

    // root + gutter included inside the column
    .col-gutterincluded-root-#{$size}-#{$i} {
      flex-basis: $vwValueGutter;
      width: $vwValueGutter;
      max-width: $vwValueGutter;
      padding-right: 0;
    }

    .col-root-#{$size}-offset-#{$i} {
      margin: $vwValue;
      margin-bottom: 0;
      margin-right: 0;
      margin-top: 0;
    }

    .off-root-#{$size}-#{$i} {
      @if $i > 0 {
        padding-left: $vwValue;
      }
    }
    .off-root-r-#{$size}-#{$i} {
      @if $i > 0 {
        padding-right: $vwValue;
      }
    }
    .off-root-gutter-#{$size}-#{$i} {
      @if $i > 0 {
        @if $i == $max-colums {
          padding-left: 100vw;
        } @else {
          padding-left: 1vw * ($i * $column-percent + $i * $gutter-percent);
        }
      }
    }
    .off-root-gutter-r-#{$size}-#{$i} {
      @if $i > 0 {
        @if $i == $max-colums {
          padding-right: 100vw;
        } @else {
          padding-right: 1vw * ($i * $column-percent + $i * $gutter-percent);
        }
      }
    }

    // absolute
    .off-abs-#{$size}-#{$i} {
      left: $vwValue;
    }

    .off-abs-gutter-#{$size}-#{$i} {
      left: $vwValueGutter;
    }

    .off-abs-r-#{$size}-#{$i} {
      right: $vwValue;
    }

    .off-abs-r-gutter-#{$size}-#{$i} {
      right: $vwValueGutter;
    }

    .mg-gutter-#{$size}-#{$i} {
      margin-left: ($i * $gutter) + px;
    }
    .mg-gutter-r-#{$size}-#{$i} {
      margin-right: ($i * $gutter) + px;
    }

    // default offsets

    .off-#{$size} {
        margin-left: 0;
    }
    .off-r-#{$size}{
      margin-right: 0;
    }
    .off-gutter-#{$size}{
      margin-left: 0;
    }
    .off-gutter-r-#{$size}{
      margin-right: 0;
    }
    .off-root-#{$size}{
      padding-left:0;
    }
    .off-root-r-#{$size} {
        padding-right:0;
    }
    .off-root-gutter-#{$size} {
        padding-left: 0;
    }
    .off-root-gutter-r-#{$size} {
      padding-right: 0;
    }



  }

  // // To have a first padding that doesn't have the gutter
  // // %
  // .off-#{$size}-first {
  //     margin-left: calc(#{(100% / $max-colums)});
  // }
  // .off-#{$size}-gt-first {
  //     margin-left: calc( #{(100% / $max-colums)} - #{$gutter + px} + #{($gutter / $max-colums) + px} );
  // }
  // .off-r-#{$size}-first {
  //     margin-right: calc(#{(100% / $max-colums)};
  // }
  // .off-r-#{$size}-gt-first {
  //     margin-right: calc(#{(100% / $max-colums)} - #{$gutter + px} + #{($gutter / $max-colums) + px} );
  // }


  // // root
  // .off-root-#{$size}-first {
  //     padding-left: calc(#{(100vw / $max-colums)});
  // }
  // .off-root-#{$size}-gt-first {
  //     padding-left: calc( #{(100vw / $max-colums)} - #{$gutter + px} + #{($gutter / $max-colums) + px} );
  // }
  // .off-root-r-#{$size}-first {
  //     padding-right: calc(#{(100vw / $max-colums)};
  // }
  // .off-root-r-#{$size}-gt-first {
  //     padding-right: calc(#{(100vw / $max-colums)} - #{$gutter + px} + #{($gutter / $max-colums) + px} );
  // }


  .col-#{$size}-auto {
    flex: 1 1 auto;
    max-width: inherit;
  }
  // Remove the padding (gutter) for the last item
  [class*='col-']:last-of-type {
    padding-right: 0;
  }
}

/*
 * Styles a <textarea> with horizontal line rules
 * $line-height: px value of textarea's line-height
 * $rule-height: px value of desired rule height
 * $rule-color: desired color of horizontal rules
 */
@mixin multiline-input($line-height, $rule-height, $rule-color) {
    background-image: linear-gradient(from top, transparent, transparent $line-height, $rule-color 0);
    background-image: -ms-linear-gradient(top, transparent, transparent $line-height, $rule-color 0);
    background-image: -o-linear-gradient(top, transparent, transparent $line-height, $rule-color 0);
    background-image: -moz-linear-gradient(top, transparent, transparent $line-height, $rule-color 0);
    background-image: -webkit-linear-gradient(top, transparent, transparent $line-height, $rule-color 0);
    background-size: 100% $line-height + $rule-height;
    line-height: $line-height;

    resize: none;
    -moz-appearance: none;
    -webkit-appearance: none;
    appearance: none;
}

@mixin cTomatoRgba($attribute, $alpha) {
  #{$attribute}: rgba(233, 67, 53, $alpha);
}

@mixin cGoldenRodRgba($attribute, $alpha) {
  #{$attribute}: rgba(249, 186, 5, $alpha);
}

@mixin cTangerineRgba($attribute, $alpha) {
  #{$attribute}: rgba(255, 140, 0, $alpha);
}

@mixin cDodgerBlueRgba($attribute, $alpha) {
  #{$attribute}: rgba(66, 132, 243, $alpha);
}

@mixin cMediumGreenRgba($attribute, $alpha) {
  #{$attribute}: rgba(52, 167, 83, $alpha);
}

@mixin cPurplyBlueRgba($attribute, $alpha) {
  #{$attribute}: rgba(115, 20, 226, $alpha);
}

@mixin cDarkGrayRgba($attribute, $alpha) {
  #{$attribute}: rgba(44, 45, 48, $alpha);
}

@mixin cCoolGrayRgba($attribute, $alpha) {
  #{$attribute}: rgba(149, 156, 165, $alpha);
}

@mixin cSilverRgba($attribute, $alpha) {
  #{$attribute}: rgba(235, 236, 236, $alpha);
}

@mixin replaceText() {
    display: block;
    text-indent: -99999px;
}

@mixin tracking($val, $font-size) {
  letter-spacing: ( $val * $font-size / 1000 ) * 1px;
}

@mixin photoshop-letterspacing-to-ems($val) {
  letter-spacing: ( $val / 1000 ) * 1em;
}

// custom scrollbar
@mixin scrollbar($size, $foreground-color, $background-color: rgba($foreground-color, 0.25)) {
  // For Google Chrome
  &::-webkit-scrollbar {
      width:  $size;
      height: $size;
  }

  &::-webkit-scrollbar-thumb {
      background: $foreground-color;
  }

  &::-webkit-scrollbar-track {
      background: $background-color;
  }

  // For Internet Explorer
  &{
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

@function responsive-font($breakpoint, $px) {
  @return #{$px*100/$breakpoint}vw;
}

/// least-squares-fit
/// Calculate the least square fit linear regression of provided values
/// @param {map} $map - A Sass map of viewport width and size value combinations
/// @return Linear equation as a calc() function
/// @example
///   font-size: least-squares-fit((576px: 24px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function least-squares-fit($map) {

  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "leastSquaresFit() $map must be at least 2 values"
  }

  // Calculate the Means
  $resTotal: 0;
  $valueTotal: 0;
  @each $res, $value in $map {
    $resTotal: $resTotal + $res;
    $valueTotal: $valueTotal + $value;
  }
  $resMean: $resTotal/$length;
  $valueMean: $valueTotal/$length;

  // Calculate some other stuff
  $multipliedDiff: 0;
  $squaredDiff: 0;
  @each $res, $value in $map {

    // Differences from means
    $resDiff: $res - $resMean;
    $valueDiff: $value - $valueMean;

    // Sum of multiplied differences
    $multipliedDiff: $multipliedDiff + ($resDiff * $valueDiff);

    // Sum of squared resolution differences
    $squaredDiff: $squaredDiff + ($resDiff * $resDiff);
  }

  // Calculate the Slope
  $m: $multipliedDiff / $squaredDiff;

  // Calculate the Y-Intercept
  $b: $valueMean - ($m * $resMean);

  // Return the CSS calc equation
  @return calc(#{$m*100}vw + #{$b});

}

// simple function to get back rem value;
// in our case body is set to 62.5% so our base font-size is a 10 multiple
@function get-rem($font-size) {
    @return $font-size/10 * 1rem;
}

// helper function to make sure the unit type (px, rem)
// is removed we want just the raw value no unit
@function get-value($n) {
    @return $n / ($n * 0 + 1);
}

// return ratio line-height / font-size
@function unitless-lh($font-size, $line-height) {
   @return get-value($line-height / $font-size);
}
// Usage:
// .foo {
//     font-size: 26px;
//     line-height: get-line-height(26px, 32px); //1.23077
// }

// mixins for use to easily input Font Style Guide
// px is optional too!
// letter spacing is optional for some edge cases
@mixin fontStyle($font-size, $line-height, $letter-spacing:"") {

  font-size: get-rem(get-value($font-size));
  line-height: unitless-lh($font-size, $line-height);

  //basic check fot letter spacing
  @if $letter-spacing != "" {
    @if unit($letter-spacing) == 'px' {
      letter-spacing: $letter-spacing;
    } @else{
      letter-spacing: $letter-spacing * 1px;
    }
  }
};

@function formatSixteen-by-Nine($width) {
  @return calc(#{$width * 9 / 16});
}

